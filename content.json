{"meta":{"title":"maple博客","subtitle":null,"description":null,"author":"maple","url":"https://conjurermaple.github.io"},"pages":[{"title":"404 Not Found：该页无法显示","date":"2019-02-22T06:55:02.968Z","updated":"2019-02-21T11:24:38.160Z","comments":false,"path":"/404.html","permalink":"https://conjurermaple.github.io//404.html","excerpt":"","text":""},{"title":"书单","date":"2019-02-22T07:12:07.916Z","updated":"2019-02-21T11:24:38.163Z","comments":false,"path":"books/index.html","permalink":"https://conjurermaple.github.io/books/index.html","excerpt":"","text":""},{"title":"友情链接","date":"2019-02-21T11:24:38.165Z","updated":"2019-02-21T11:24:38.165Z","comments":true,"path":"links/index.html","permalink":"https://conjurermaple.github.io/links/index.html","excerpt":"","text":""},{"title":"关于","date":"2019-02-22T06:50:12.087Z","updated":"2019-02-21T11:24:38.162Z","comments":false,"path":"about/index.html","permalink":"https://conjurermaple.github.io/about/index.html","excerpt":"","text":"个人详细介绍"},{"title":"Repositories","date":"2019-02-21T11:24:38.166Z","updated":"2019-02-21T11:24:38.166Z","comments":false,"path":"repository/index.html","permalink":"https://conjurermaple.github.io/repository/index.html","excerpt":"","text":""},{"title":"分类","date":"2019-02-23T12:10:06.024Z","updated":"2019-02-21T11:24:38.164Z","comments":false,"path":"categories/index.html","permalink":"https://conjurermaple.github.io/categories/index.html","excerpt":"","text":""},{"title":"标签","date":"2019-02-21T11:24:38.167Z","updated":"2019-02-21T11:24:38.167Z","comments":false,"path":"tags/index.html","permalink":"https://conjurermaple.github.io/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"Jquery+Ajax+Servlet实现省市二级联动","slug":"Jquery-Ajax-Servlet实现省市二级联动","date":"2019-02-24T10:19:27.000Z","updated":"2019-02-24T10:19:45.210Z","comments":true,"path":"2019/02/24/Jquery-Ajax-Servlet实现省市二级联动/","link":"","permalink":"https://conjurermaple.github.io/2019/02/24/Jquery-Ajax-Servlet实现省市二级联动/","excerpt":"","text":"","categories":[{"name":"前端","slug":"前端","permalink":"https://conjurermaple.github.io/categories/前端/"}],"tags":[{"name":"前端","slug":"前端","permalink":"https://conjurermaple.github.io/tags/前端/"}]},{"title":"Jquery核心操作","slug":"Jquery核心操作","date":"2019-02-24T01:52:48.000Z","updated":"2019-02-24T10:18:30.169Z","comments":true,"path":"2019/02/24/Jquery核心操作/","link":"","permalink":"https://conjurermaple.github.io/2019/02/24/Jquery核心操作/","excerpt":"","text":"jquery认识jquery是一个JavaScript的前端框架优势： 1、链式语法和多功能接口 2、高效灵活的css选择器，可扩展 3、插件丰富 4、浏览器兼容性好 使用jquery(jquery加载机制与js的加载机制)引入js文件 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758 &lt;script type=\"text/javascript\" src=\"js/jquery-2.1.3.js\"&gt;&lt;/script&gt;&lt;script type=\"text/javascript\"&gt; //js获取id为myDiv的元素 var divObj = document.getElementById(\"myDiv\"); //null //jquery获取id为myDiv的元素 $(function()&#123; var jqObj = $(\"#myDiv\"); console.log(jqObj); &#125;); console.log(divObj); /* 第一个打印null，说明没有获取到 这是因为程序是从上到下执行的 解决方案： 将js代码写到body末尾 将js代码写在 window.onload=function()&#123;&#125;;里 jquery代码写在$(function()&#123;&#125;;里 他获取到了是因为jquery是读取完页面元素后才执行，所以能获取到 */ //js获取id为myDiv的元素 window.onload = function() &#123; var divObj = document.getElementById(\"myDiv\"); //null &#125; //jquery获取id为myDiv的元素 $(function()&#123; var jqObj = $(\"#myDiv\"); console.log(jqObj); &#125;); console.log(divObj); /* 发现总是jquery获取到元素 window.onload是整个页面加载完成后才执行 jquery是读取完页面元素后才执行，所以能获取到 */ /* jquery其他写法 */ $(document).ready(function() &#123; &#125;); /* $等同于jQuery 注意:Q是大写 $(\"#myDiv\");等于jQuery(\"#myDiv\"); */&lt;/script&gt;html代码&lt;body&gt; &lt;!--注意：如果存在多个id相同的元素，jquery只获取第一个元素，所以及其建议id保持唯一--&gt; &lt;div id=\"myDiv\"&gt;&lt;/div&gt;&lt;/body&gt; dom对象和jquery对象转换以下代码使用浏览器f12查看效果 123456789101112131415161718192021 &lt;script type=\"text/javascript\" src=\"js/jquery-2.1.3.js\"&gt;&lt;/script&gt;&lt;script type=\"text/javascript\"&gt; $(function() &#123; var jqueryObj = $(\"#myDiv\"); var divObj = document.getElementById(\"myDiv\"); console.log(divObj); console.log(jqueryObj); console.log(\"============================\"); //将dom对象转换为jquery对象 var jqueryObj2 = $(divObj); console.log(jqueryObj2); //将jquery对象转换为dom对象 var divObj2 = jqueryObj[0]; console.log(divObj2); &#125;);&lt;/script&gt;&lt;/head&gt;&lt;body&gt; &lt;div id=\"myDiv\"&gt;&lt;/div&gt;&lt;/body&gt; jquery选择器选择器是为了定位元素 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657 &lt;script type=\"text/javascript\" src=\"js/jquery-2.1.3.js\"&gt;&lt;/script&gt;&lt;script type=\"text/javascript\"&gt; $(function() &#123; //id选择器 var idObj = $(\"#myDiv\"); console.log(idObj); //class选择器 var classObj = $(\".myDiv\"); console.log(classObj); //元素选择器 选择一个元素 var eleObj = $(\"a\"); console.log(eleObj); //选择所有元素----通配符 var allObj = $(\"*\"); console.log(allObj); //选择多个元素 var manyObj = $(\"div,a\"); console.log(manyObj); //祖先 后代 包括孙子 //$(\"ul li\").css('color','red'); //父亲 儿子 //$(\"form&gt;input\").val(\"test\"); //元素 紧接下一个元素 即同级的第一个元素 //$(\"form+input\").val(\"xxx\"); //元素 同级的所有元素 val(\"xxx\")等于value=\"xxx\" $(\"form~input\").val(\"xxx\"); &#125;);&lt;/script&gt;&lt;/head&gt;&lt;body&gt; &lt;div id=\"myDiv\"&gt;&lt;/div&gt; &lt;div class=\"myDiv\"&gt;&lt;/div&gt; &lt;a&gt;&lt;/a&gt; &lt;ul&gt; &lt;li&gt;1&lt;/li&gt; &lt;li&gt;1&lt;/li&gt; &lt;li&gt;1&lt;/li&gt; &lt;li&gt;&lt;a&gt;a1&lt;/a&gt;&lt;/li&gt; &lt;a&gt;a2&lt;/a&gt; &lt;/ul&gt; &lt;form&gt; &lt;label&gt;Name:&lt;/label&gt; &lt;input name=\"name\" /&gt; &lt;fieldset&gt; &lt;label&gt;Newsletter:&lt;/label&gt; &lt;input name=\"newsletter\" /&gt; &lt;/fieldset&gt; &lt;/form&gt; &lt;input name=\"none\" /&gt;&lt;/body&gt; jquery注册事件123456789101112131415161718192021222324252627282930 &lt;script type=\"text/javascript\" src=\"js/jquery-2.1.3.js\"&gt;&lt;/script&gt;&lt;script type=\"text/javascript\"&gt; $(function()&#123; //方式一：低版本才能用，我用的是版本2，不能用 //缺点：不能取消事件 /* $(\"#btn\").onclick(function()&#123; alert(1); &#125;); */ //方式二： /* $(\"#btn\").on(\"click\",function()&#123; alert(2); &#125;); */ //取消点击事件 //$(\"#btn\").off(\"click\"); //方式三： $(\"#btn\").bind(\"click\",function()&#123; alert(3); &#125;); //取消事件 $(\"#btn\").unbind(\"click\"); &#125;);&lt;/script&gt;&lt;/head&gt;&lt;body&gt; &lt;button id=\"btn\"&gt;点击&lt;/button&gt;&lt;/body&gt; jquery方法（结合示例）示例1： 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455 &lt;script type=\"text/javascript\" src=\"js/jquery-2.1.3.js\"&gt;&lt;/script&gt;&lt;script type=\"text/javascript\"&gt; $(function()&#123; $(\"#btn\").on(\"click\",function() &#123; //input[name=hobbies]:checked 表示input类型name=hobbies并且被选中的元素 alert($(\"input[name=hobbies]:checked\").length); &#125;); $(\"p\").on(\"click\",function() &#123; //隐藏当前元素 $(this).hide(); &#125;); /* :odd 匹配所有索引值为奇数的元素，从 0 开始计数,对应表格的就是偶数行 :even 匹配所有索引值为偶数的元素，从 0 开始计数,对应表格的就是奇数行 */ $(\"table tr:odd\").css('background-color','red'); $(\"table tr:even\").css('background-color','yellow'); &#125;);&lt;/script&gt;&lt;/head&gt;&lt;body&gt; 篮球 &lt;input type=\"checkbox\" name=\"hobbies\" /&gt; 足球 &lt;input type=\"checkbox\" name=\"hobbies\" /&gt; 羽毛球 &lt;input type=\"checkbox\" name=\"hobbies\" /&gt; &lt;input value=\"点击获取选中个数\" type=\"button\" id=\"btn\" /&gt; &lt;br /&gt;点击p标签隐藏 &lt;br /&gt; &lt;p&gt;p1&lt;/p&gt; &lt;p&gt;p2&lt;/p&gt; &lt;p&gt;p3&lt;/p&gt; &lt;br /&gt;给不同的行添加颜色&lt;br/&gt; &lt;table border=\"1\" width=\"200px\"&gt; &lt;tr&gt; &lt;td&gt;item1&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;item2&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;item3&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;item4&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;item5&lt;/td&gt; &lt;/tr&gt; &lt;/table&gt;&lt;/body&gt; 示例2：1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556&lt;script type=\"text/javascript\" src=\"js/jquery-2.1.3.js\"&gt;&lt;/script&gt;&lt;script type=\"text/javascript\"&gt; $(function()&#123; //一行代码 $(\"#btn1\").on('click',function()&#123; //#select1 option:selected 找到id为select1 下面的选中的option 然后将其添加到id为select2里 $(\"#select1 option:selected\").appendTo(\"#select2\"); &#125;); $(\"#btn2\").on('click',function()&#123; //将id为select1下的所有option添加到id为select2里 $(\"#select1 option\").appendTo(\"#select2\"); &#125;); $(\"#btn3\").on('click',function()&#123; //#select1 option:selected 找到id为select2 下面的选中的option 然后将其添加到id为select1里 $(\"#select2 option:selected\").appendTo(\"#select1\"); &#125;); $(\"#btn4\").on('click',function()&#123; //$(\"#select2 option\").appendTo(\"#select1\"); //使用append方法 添加 $(\"#select1\").append(\"#select2 option\"); &#125;); &#125;);&lt;/script&gt;&lt;/head&gt;&lt;body&gt; &lt;table border=\"1\"&gt; &lt;tr&gt; &lt;td&gt; &lt;select id=\"select1\" style=\"width:100px\" size=\"10\" multiple=\"multiple\"&gt; &lt;option value=\"选项1\"&gt;选项1&lt;/option&gt; &lt;option value=\"选项2\"&gt;选项2&lt;/option&gt; &lt;option value=\"选项3\"&gt;选项3&lt;/option&gt; &lt;option value=\"选项4\"&gt;选项4&lt;/option&gt; &lt;option value=\"选项5\"&gt;选项5&lt;/option&gt; &lt;option value=\"选项6\"&gt;选项6&lt;/option&gt; &lt;option value=\"选项7\"&gt;选项7&lt;/option&gt; &lt;option value=\"选项8\"&gt;选项8&lt;/option&gt; &lt;option value=\"选项9\"&gt;选项9&lt;/option&gt; &lt;/select&gt; &lt;/td&gt; &lt;td align=\"center\"&gt; &lt;input type=\"button\" id=\"btn1\" value=\"--&gt;\"/&gt;&lt;br/&gt; &lt;input type=\"button\" id=\"btn2\" value=\"==&gt;\"/&gt;&lt;br/&gt; &lt;input type=\"button\" id=\"btn3\" value=\"&lt;--\"/&gt;&lt;br/&gt; &lt;input type=\"button\" id=\"btn4\" value=\"&lt;==\"/&gt; &lt;/td&gt; &lt;td&gt; &lt;select id=\"select2\" style=\"width:100px\" size=\"10\" multiple=\"multiple\"&gt;&lt;/select&gt; &lt;/td&gt; &lt;/tr&gt; &lt;/table&gt;&lt;/body&gt; 示例3：123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051 &lt;script type=\"text/javascript\" src=\"js/jquery-2.1.3.js\"&gt;&lt;/script&gt;&lt;script type=\"text/javascript\"&gt; $(function()&#123; $(\"#checkAll\").on('click',function()&#123; /* input[name=hobbies]：input类型name=hobbies的元素 prop:改变属性的方法，attr方法也可以 prop(\"checked\",true); 选中 */ //$(\"input[name=hobbies]\").attr(\"checked\",true); $(\"input[name=hobbies]\").prop(\"checked\",true); &#125;); $(\"#checkNotAll\").on(\"click\",function()&#123; $(\"input[name=hobbies]\").prop(\"checked\",false); &#125;); $(\"#checkUnAll\").on(\"click\",function()&#123; var hobbies = $(\"input[name=hobbies]\"); //获取所有的复选框 hobbies.each(function (index, domEle) &#123; //遍历 /* domEle:是dom对象 !domEle.checked:对他原来的属性进行取反 */ $(domEle).prop('checked',!domEle.checked); &#125;); &#125;); &#125;); function checkChange(src)&#123; $(\"input[name=hobbies]\").prop(\"checked\",src.checked); &#125;&lt;/script&gt;&lt;/head&gt;&lt;body&gt; 请选择你的爱好:&lt;br/&gt; &lt;div&gt; &lt;input type=\"checkbox\" name=\"hobbies\"/&gt;打篮球&amp;nbsp; &lt;input type=\"checkbox\" name=\"hobbies\"/&gt;踢足球&amp;nbsp; &lt;input type=\"checkbox\" name=\"hobbies\"/&gt;上网&amp;nbsp; &lt;/div&gt; &lt;div&gt; &lt;input type=\"checkbox\" onchange=\"checkChange(this)\"/&gt;全选/全不选&lt;br/&gt; &lt;input type=\"button\" id=\"checkAll\" value=\"全选\"/&gt; &lt;input type=\"button\" id=\"checkNotAll\" value=\"全不选\"/&gt; &lt;input type=\"button\" id=\"checkUnAll\" value=\"反选\"/&gt; &lt;/div&gt;&lt;/body&gt; 示例4：1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859 &lt;script type=\"text/javascript\" src=\"js/jquery-2.1.3.js\"&gt;&lt;/script&gt;&lt;script type=\"text/javascript\"&gt; $(function() &#123; $(\"#btn1\").on(\"click\",function()&#123; $(\"#select\").val(\"2号\"); &#125;); $(\"#btn2\").on(\"click\",function()&#123; $(\"#selectMultiple\").val(['2号','5号']); &#125;); $(\"#btn3\").on(\"click\",function()&#123; $(\"input[type=checkbox]\").val(['复选2','复选4']); &#125;); $(\"#btn4\").on(\"click\",function()&#123; //input[type=radio]:eq(1)表示input类型type=radio的第二个元素 eq从0开始 $(\"input[type=radio]:eq(1)\").prop('checked',true); &#125;); &#125;);&lt;/script&gt;&lt;title&gt;练习5&lt;/title&gt;&lt;/head&gt;&lt;body&gt; &lt;input id=\"btn1\" type=\"button\" value=\"使单选下拉框‘2号’选中\"/&gt;&lt;br/&gt; &lt;input id=\"btn2\" type=\"button\" value=\"使多选下拉框‘2号’和‘5号’选中\"/&gt;&lt;br/&gt; &lt;input id=\"btn3\" type=\"button\" value=\"使复选框‘2号’和‘4号’选中\"/&gt;&lt;br/&gt; &lt;input id=\"btn4\" type=\"button\" value=\"使单选框‘单选2’选中\"/&gt;&lt;br/&gt; &lt;input id=\"btn5\" type=\"button\" value=\"打印已被选中的值\"/&gt;&lt;br/&gt; &lt;form name=\"userForm\"&gt; 单选下拉框&lt;select id=\"select\" name=\"select\"&gt; &lt;option value=\"1号\"&gt;1号&lt;/option&gt; &lt;option value=\"2号\"&gt;2号&lt;/option&gt; &lt;option value=\"3号\"&gt;3号&lt;/option&gt; &lt;option value=\"4号\"&gt;4号&lt;/option&gt; &lt;option value=\"5号\"&gt;5号&lt;/option&gt; &lt;option value=\"6号\"&gt;6号&lt;/option&gt; &lt;/select&gt; 多选下拉框&lt;select id=\"selectMultiple\" multiple=\"multiple\" size=\"6\" name=\"selectMultiple\"&gt; &lt;option value=\"1号\"&gt;01号&lt;/option&gt; &lt;option value=\"2号\"&gt;02号&lt;/option&gt; &lt;option value=\"3号\"&gt;03号&lt;/option&gt; &lt;option value=\"4号\"&gt;04号&lt;/option&gt; &lt;option value=\"5号\"&gt;05号&lt;/option&gt; &lt;option value=\"6号\"&gt;06号&lt;/option&gt; &lt;/select&gt; &lt;br/&gt; 复选框&lt;input value=\"复选1\" type=\"checkbox\" name=\"checkbox\"/&gt;复选1 &lt;input value=\"复选2\" type=\"checkbox\" name=\"checkbox\"/&gt;复选2 &lt;input value=\"复选3\" type=\"checkbox\" name=\"checkbox\"/&gt;复选3 &lt;input value=\"复选4\" type=\"checkbox\" name=\"checkbox\"/&gt;复选4 &lt;input value=\"复选5\" type=\"checkbox\" name=\"checkbox\"/&gt;复选5 &lt;br/&gt; 单选框&lt;input value=\"单选1\" type=\"radio\" name=\"radio\"/&gt;单选1 &lt;input value=\"单选2\" type=\"radio\" name=\"radio\"/&gt;单选2 &lt;input value=\"单选3\" type=\"radio\" name=\"radio\"/&gt;单选3 &lt;input value=\"单选4\" type=\"radio\" name=\"radio\"/&gt;单选4 &lt;/form&gt;&lt;/body&gt; 示例5：12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455&lt;script type=\"text/javascript\" src=\"js/jquery-2.1.3.js\"&gt;&lt;/script&gt;&lt;script language=\"javascript\"&gt; $(function()&#123; $(\"#btn_submit\").on('click',function()&#123; //获取文本框的值 var username = $(\"#username\").val(); var email = $(\"#email\").val(); var tel = $(\"#tel\").val(); //追加元素 $(\"#userTbody\").append(\"&lt;tr&gt;&lt;td&gt;\"+username+\"&lt;/td&gt;&lt;td&gt;\"+email+\"&lt;/td&gt;&lt;td&gt;\"+tel+\"&lt;/td&gt;&lt;td&gt;&lt;button onclick='remove(this)'&gt;删除&lt;/button&lt;/td&gt;&lt;/tr&gt;\"); &#125;); $(\"#btn_removeAll\").on(\"click\",function()&#123; //将表格清空 $(\"#userTbody\").empty(); &#125;); &#125;); function remove(src) &#123; //找到tr，删除 //$(src).parent().parent().remove(); //closest(\"tr\") 搜索最近的tr $(src).closest(\"tr\").remove(); &#125; &lt;/script&gt;&lt;/head&gt;&lt;body&gt; &lt;form name=\"userForm\"&gt; &lt;center&gt; 用户录入&lt;br/&gt; 用户名:&lt;input id=\"username\" name=\"username\" type=\"text\"/&gt; E-mail:&lt;input id=\"email\" name=\"email\" type=\"text\"/&gt; 电话:&lt;input id=\"tel\" name=\"tel\" type=\"text\"/&gt; &lt;input type=\"button\" value=\"提交\" id=\"btn_submit\"/&gt; &lt;input type=\"button\" value=\"删除所有\" id=\"btn_removeAll\"/&gt; &lt;/center&gt; &lt;/form&gt; &lt;hr/&gt; &lt;table border=\"1\" align=\"center\"&gt; &lt;thead&gt; &lt;tr&gt; &lt;th&gt;用户名&lt;/th&gt; &lt;th&gt;E-mail&lt;/th&gt; &lt;th&gt;电话&lt;/th&gt; &lt;th&gt;操作&lt;/th&gt; &lt;/tr&gt; &lt;/thead&gt; &lt;tbody id=\"userTbody\"&gt; &lt;/tbody&gt; &lt;/table&gt;&lt;/body&gt; 其他方法123456789101112131415161718&lt;script type=\"text/javascript\" src=\"js/jquery-2.1.3.js\"&gt;&lt;/script&gt;&lt;script type=\"text/javascript\"&gt;$(function()&#123;//创建元素b ，是dom对象 var b = document.createElement(\"b\"); b.innerHTML = \"创建元素\"; $(\"#myDiv\").append(b); //追加span元素，发现原来的不在，如果想要原来的，这时我们就可以使用追加克隆 //$(\"#myDiv\").append($(\"span\")); //clone()不会克隆其事件，如果事件也想克隆就用clone(true) $(\"#myDiv\").append($(\"span\").clone());&#125;);&lt;/script&gt;&lt;/head&gt;&lt;body&gt; &lt;div id=\"myDiv\"&gt;&lt;/div&gt; &lt;span&gt;克隆&lt;/span&gt;&lt;/body&gt;","categories":[{"name":"前端","slug":"前端","permalink":"https://conjurermaple.github.io/categories/前端/"}],"tags":[{"name":"前端","slug":"前端","permalink":"https://conjurermaple.github.io/tags/前端/"}]},{"title":"Ajax结合json案例学习","slug":"Ajax结合json案例学习","date":"2019-02-23T12:07:14.000Z","updated":"2019-02-23T12:38:22.656Z","comments":true,"path":"2019/02/23/Ajax结合json案例学习/","link":"","permalink":"https://conjurermaple.github.io/2019/02/23/Ajax结合json案例学习/","excerpt":"","text":"Ajax介绍百度百科已经很详细的解释了该技术Ajax 即“Asynchronous Javascript And XML”（异步 JavaScript 和 XML），是指一种创建交互式网页应用的网页开发技术。Ajax 是一种用于创建快速动态网页的技术。Ajax 是一种在无需重新加载整个网页的情况下，能够更新部分网页的技术。通过在后台与服务器进行少量数据交换，Ajax 可以使网页实现异步更新。这意味着可以在不重新加载整个网页的情况下，对网页的某部分进行更新。 为什么需要Ajax传统的交互方式：是发送请求到后端处理后，再刷新整个页面缺点：如果数据量大，加载会很慢，用户体验性不好 Ajax交互：只会刷新当前页面，也就是局部刷新 Ajax应用场景Ajax的应用场景很多，现在几乎每个web应用都使用了Ajax比如： 1、百度搜索的自动提示 2、无刷新分页 3、用户名的重复检查 4、购物车 5、用户登录（通过Ajax提交请求） 。。。。。。。 同步和异步概念解释同步：一个操作必须等到其他操作执行完后才能执行 例子： 你去上厕所，但只有一个坑，而且还有人，这时你只能等他上完出来，你才能进去上厕所 异步：一个操作不必等到其他操作执行完后才执行，可以一起执行 例子： 你去上厕所，我不需要等他出来，我换一个坑上 Ajax核心对象XMLHttpRequest1、创建XMLHttpRequest对象 //这是IE7+、Firefox、Chrome、Safari 以及 Opera的创建方式 var ajaxObj = new XMLHttpRequest(); //老版本的 Internet Explorer （IE5、IE6） var ajaxObj = new ActiveXObject(&quot;Microsoft.XMLHTTP&quot;); 2、将创建XMLHttpRequest对象封装成一个方法 方式一： 12345678910function createAjax() &#123; var ajaxObj; if (window.XMLHttpRequest) &#123; ajaxObj = new XMLHttpRequest(); &#125; else &#123; ajaxObj = new ActiveXObject(\"Microsoft.XMLHTTP\"); &#125; return ajaxObj;&#125; 方式二： 123456789function createAjax() &#123; var ajaxObj; try&#123; ajaxObj = new XMLHttpRequest(); &#125;catch(e) &#123; ajaxObj = new ActiveXObject(\"Microsoft.XMLHTTP\"); &#125; return ajaxObj;&#125; 使用Ajax检查用户名html里代码1234 &lt;!-- 这次不使用form表单提交,使用Ajax --&gt;用户名：&lt;input type=\"text\" id=\"username\" name=\"username\"&gt;密码：&lt;input type=\"password\" id=\"password\" name=\"password\"&gt;&lt;input type=\"button\" onclick=\"checkUsername()\" value=\"提交\"&gt; js代码 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748 function checkUsername() &#123; //获取username的值 var username = document.getElementById(\"username\").value; var ajaxObj = createAjax(); //创建对象 //第一个参数是请求方式，第二个参数是请求的路径，也就是提交到哪个路径 /* open(method,url,async) method：请求的类型；GET 或 POST url：文件在服务器上的位置 async：true（异步），一定要选择true或 false（同步） */ ajaxObj.open(\"get\",\"/check?username=\"+username,true); //打开连接 ,使用get方式，记住这里暂时不使用post，后面讲，传参与get方式有区别 //监听状态 /* 监听代码为什么要写在send前面？ 代码从上往下执行，有可能已经请求成功了，但是还没有执行监听的代码，从而监听不到 比如： ajaxObj.send(); alert(1)； 执行监听代码 */ //onreadystatechange:每当 readyState 属性改变时，就会调用该函数。 /* readyState:请求状态 0: 请求未初始化 未创建 1: 服务器连接已建立 open()方法 2: 请求已接收 send()方法 3: 请求处理中 服务器处理中 4: 请求已完成，且响应已就绪 响应完毕 status:Http响应状态 200: \"OK\" 请求成功 404: \"NOT FOUND\" 没有找到对应资源 500:\"Server Error\" 服务器端错误 responseText 获得字符串形式的响应数据。 responseXML 获得 XML 形式的响应数据 */ ajaxObj.onreadystatechange=function() &#123; if (ajaxObj.readyState==4 &amp;&amp; ajaxObj.status==200) &#123; //说明请求成功并且响应成功 console.log(ajaxObj.responseText);//打印返回的文本内容 &#125; &#125; //发送 ajaxObj.send();&#125; Ajax+json模拟登录 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485868788899091 &lt;script type=\"text/javascript\"&gt; /* json是一种数据交换的格式 由于XML太复杂，抒写严格 比如一个Student对象 XML表示： &lt;student&gt; &lt;name&gt;张三&lt;/name&gt; &lt;age&gt;18&lt;/age&gt; &lt;/student&gt; json表示： &#123;\"name\":\"张三\",\"age\":18&#125; */ /* json语法： &#123;key:value,key:value,key:value.....&#125; key可以使用单引号，也可以使用双引号，但建议使用双引号 后面讲json字符串转为json对象的时候讲 有多个？ //这里只列了2个，有多个直接在后面加 [&#123;key:value,key:value,key:value....&#125;,&#123;key:value,key:value,key:value...&#125;] 注意：如果value是字符串，一定要加引号 */ /* 将json格式字符串转为json对象 方式一：eval var jsonStr = '&#123;\"name\":\"张三\",\"age\":18&#125;'; var jsonObj = eval(\"(\"+jsonStr+\")\"); console.log(jsonObj); 我们再看看key使用单引号 发现也可以 var jsonStr = \"&#123;'name':'张三','age':18&#125;\"; var jsonObj = eval(\"(\"+jsonStr+\")\"); console.log(jsonObj); 方式二：JSON.parse(jsonStr); var jsonStr = '&#123;\"name\":\"张三\",\"age\":18&#125;'; var jsonObj = JSON.parse(jsonStr); console.log(jsonObj); 这种方式我们再看看key使用单引号 发现报错 这就是建议全部使用双引号的原因 var jsonStr = \"&#123;'name':'张三','age':18&#125;\"; var jsonObj = JSON.parse(jsonStr); console.log(jsonObj); */ //使用Ajax 的post方式请求以json格式返回---模拟登录function createAjax() &#123; var ajaxObj; if (window.XMLHttpRequest) &#123; //如果有这个对象 ajaxObj = new XMLHttpRequest(); &#125; else &#123; ajaxObj = new ActiveXObject(\"Microsoft.XMLHTTP\"); &#125; return ajaxObj;&#125; function login() &#123; //获取用户名以及密码 var username = document.getElementById(\"username\").value; var password = document.getElementById(\"password\").value; var ajaxObj = createAjax(); //post方式注意不是在这里传参了 ajaxObj.open(\"post\",\"/login\",true); ajaxObj.onreadystatechange=function() &#123; if (ajaxObj.readyState==4 &amp;&amp; ajaxObj.status==200) &#123; //说明请求成功并且响应成功 var jsonStr = ajaxObj.responseText;//返回的json格式字符串 //将字符串转为对象 var jsonObj = eval(\"(\"+jsonStr+\")\"); //取内容 console.log(jsonObj.success); &#125; &#125; //注意：post方式要加一句代码，使用form表单提交时，浏览器默认会加 ajaxObj.setRequestHeader(\"Content-type\",\"application/x-www-form-urlencoded\"); //发送 传参 var params = \"username=\"+username+\"&amp;password=\"+password; ajaxObj.send(params);&#125;&lt;/script&gt;&lt;/head&gt;&lt;body&gt; 用户名：&lt;input type=\"text\" id=\"username\" name=\"username\"&gt; 密码：&lt;input type=\"password\" id=\"password\" name=\"password\"&gt; &lt;input type=\"button\" onclick=\"login()\" value=\"登录\"&gt;&lt;/body&gt;","categories":[{"name":"前端","slug":"前端","permalink":"https://conjurermaple.github.io/categories/前端/"}],"tags":[{"name":"前端","slug":"前端","permalink":"https://conjurermaple.github.io/tags/前端/"}]},{"title":"JDK原生API解析XML","slug":"JDK原生API解析XML","date":"2019-02-22T05:50:31.000Z","updated":"2019-02-22T05:53:54.248Z","comments":true,"path":"2019/02/22/JDK原生API解析XML/","link":"","permalink":"https://conjurermaple.github.io/2019/02/22/JDK原生API解析XML/","excerpt":"","text":"1234567891011121314151617181920212223242526272829303132/** * @throws Exception * 修改某个节点的元素内容 * 将第一个联系人的address的值改为重庆 */ @Test public void test2() throws Exception &#123; //获取DocumentBuilderFactory DocumentBuilderFactory builderFactory = DocumentBuilderFactory.newInstance(); //获取解析器 DocumentBuilder builder = builderFactory.newDocumentBuilder(); //将内存中的XML解析为Document对象 Document dom = builder.parse(file); //拿到根节点 Element root = dom.getDocumentElement(); //拿到第一个联系人 Element linkman = (Element) root.getElementsByTagName(\"linkman\").item(0); //拿到第一个address Node address = linkman.getElementsByTagName(\"address\").item(0); //此时只是将内存中的数据更改了，没有做同步 address.setTextContent(\"重庆\"); //同步 TransformerFactory transformerFactory = TransformerFactory.newInstance(); //拿到转换器 Transformer transformer = transformerFactory.newTransformer(); //拿到内存里面的数据 Source domSource = new DOMSource(dom); //拿到磁盘上的文件 Result result = new StreamResult(file); transformer.transform(domSource, result); &#125; 1234567891011121314151617181920212223242526272829303132333435363738/** * @throws Exception * 增加一个联系人 */ @Test public void test3() throws Exception &#123; Document dom = DocumentBuilderFactory.newInstance().newDocumentBuilder().parse(file); //获取根节点 Element root = dom.getDocumentElement(); //创建linkman节点 Element linkman = dom.createElement(\"linkman\"); linkman.setAttribute(\"id\", \"3\"); root.appendChild(linkman); //创建name Element name = dom.createElement(\"name\"); name.setTextContent(\"小米\"); linkman.appendChild(name); //创建email Element email = dom.createElement(\"email\"); email.setTextContent(\"192033344@qq.com\"); linkman.appendChild(email); //创建address Element address = dom.createElement(\"address\"); address.setTextContent(\"成都高新区\"); linkman.appendChild(address); //创建group Element group = dom.createElement(\"group\"); group.setTextContent(\"小米科技有限公司\"); linkman.appendChild(group); //同步 TransformerFactory transformerFactory = TransformerFactory.newInstance(); Transformer transformer = transformerFactory.newTransformer(); Source source = new DOMSource(dom); Result result = new StreamResult(file); transformer.transform(source, result); &#125; 12345678910111213//删除第三个联系人 @Test public void test4() throws Exception &#123; Document document = DocumentBuilderFactory.newInstance().newDocumentBuilder().parse(file); Element root = document.getDocumentElement(); Node linkman = root.getElementsByTagName(\"linkman\").item(2); linkman.getParentNode().removeChild(linkman); Transformer transformer = TransformerFactory.newInstance().newTransformer(); Source source = new DOMSource(document); Result result = new StreamResult(file); transformer.transform(source, result); &#125;","categories":[{"name":"JAVA","slug":"JAVA","permalink":"https://conjurermaple.github.io/categories/JAVA/"}],"tags":[{"name":"JAVA","slug":"JAVA","permalink":"https://conjurermaple.github.io/tags/JAVA/"}]},{"title":"Dom4j解析XML","slug":"Dom4j解析XML","date":"2019-02-22T05:14:50.000Z","updated":"2019-02-22T05:55:59.528Z","comments":true,"path":"2019/02/22/Dom4j解析XML/","link":"","permalink":"https://conjurermaple.github.io/2019/02/22/Dom4j解析XML/","excerpt":"","text":"加入dom4j包 12345678910/** * @throws Exception * 获取Document */ @Test public void test1() throws Exception &#123; SAXReader reader = new SAXReader(); Document document = reader.read(file); System.out.println(document); &#125; 123456789101112131415161718192021/** * @throws Exception * 取出第二个联系人的名字 */ @Test public void test2() throws Exception &#123; SAXReader reader = new SAXReader(); Document document = reader.read(file); //获取根节点 Element rootElement = document.getRootElement(); //拿到所有的linkman List&lt;Element&gt; linkmanList = rootElement.elements(\"linkman\"); //拿到第二个联系人 Element linkman = linkmanList.get(1); /* Element name = linkman.element(\"name\"); String text = name.getText();*/ //拿到name的值 System.out.println(linkman.elementText(\"name\")); &#125; 1234567891011121314151617181920212223242526272829/** * @throws Exception * 修改第一个联系人的地址 */ @Test public void test3() throws Exception &#123; SAXReader reader = new SAXReader(); Document document = reader.read(file); Element rootElement = document.getRootElement(); List&lt;Element&gt; linkmanList = rootElement.elements(\"linkman\"); Element linkman = linkmanList.get(0); Element address = linkman.element(\"address\"); address.setText(\"南充\"); /** * // lets write to a file XMLWriter writer = new XMLWriter( new FileWriter( \"output.xml\" ) ); writer.write( document ); writer.close(); * */ //同步 FileWriter fileWriter = new FileWriter(file); XMLWriter writer = new XMLWriter(fileWriter); writer.write(document); writer.close(); &#125; 123456789101112131415161718192021222324252627/** * @throws Exception * 增加一个联系人 */ @Test public void test4() throws Exception &#123; SAXReader saxReader = new SAXReader(); Document document = saxReader.read(file); Element rootElement = document.getRootElement(); Element linkman = rootElement.addElement(\"linkman\"); Element name = linkman.addElement(\"name\"); name.setText(\"小米\"); Element email = linkman.addElement(\"email\"); email.setText(\"1920347@qq.com\"); Element address = linkman.addElement(\"address\"); address.setText(\"高新区\"); Element group = linkman.addElement(\"group\"); group.setText(\"小米科技有限公司\"); new OutputFormat(); //同步 OutputFormat format = OutputFormat.createPrettyPrint(); FileWriter fileWriter = new FileWriter(file); XMLWriter xmlWriter = new XMLWriter(fileWriter,format); xmlWriter.write(document); xmlWriter.close(); &#125; 12345678910111213141516171819/** * @throws Exception * 删除第三个联系人 */ @Test public void test5() throws Exception &#123; SAXReader saxReader = new SAXReader(); Document document = saxReader.read(file); Element rootElement = document.getRootElement(); List&lt;Element&gt; linkmanList = rootElement.elements(\"linkman\"); Element linkman = linkmanList.get(2); linkman.getParent().remove(linkman); //同步 FileWriter fileWriter = new FileWriter(file); XMLWriter xmlWriter = new XMLWriter(fileWriter); xmlWriter.write(document); xmlWriter.close(); &#125;","categories":[{"name":"JAVA","slug":"JAVA","permalink":"https://conjurermaple.github.io/categories/JAVA/"}],"tags":[{"name":"JAVA","slug":"JAVA","permalink":"https://conjurermaple.github.io/tags/JAVA/"}]}]}