{"meta":{"title":"maple博客","subtitle":null,"description":null,"author":"maple","url":"https://conjurermaple.github.io"},"pages":[{"title":"404 Not Found：该页无法显示","date":"2019-02-22T06:55:02.968Z","updated":"2019-02-21T11:24:38.160Z","comments":false,"path":"/404.html","permalink":"https://conjurermaple.github.io//404.html","excerpt":"","text":""},{"title":"书单","date":"2019-02-22T07:12:07.916Z","updated":"2019-02-21T11:24:38.163Z","comments":false,"path":"books/index.html","permalink":"https://conjurermaple.github.io/books/index.html","excerpt":"","text":""},{"title":"关于","date":"2019-02-22T06:50:12.087Z","updated":"2019-02-21T11:24:38.162Z","comments":false,"path":"about/index.html","permalink":"https://conjurermaple.github.io/about/index.html","excerpt":"","text":"个人详细介绍"},{"title":"友情链接","date":"2019-02-21T11:24:38.165Z","updated":"2019-02-21T11:24:38.165Z","comments":true,"path":"links/index.html","permalink":"https://conjurermaple.github.io/links/index.html","excerpt":"","text":""},{"title":"标签","date":"2019-02-21T11:24:38.167Z","updated":"2019-02-21T11:24:38.167Z","comments":false,"path":"tags/index.html","permalink":"https://conjurermaple.github.io/tags/index.html","excerpt":"","text":""},{"title":"Repositories","date":"2019-02-21T11:24:38.166Z","updated":"2019-02-21T11:24:38.166Z","comments":false,"path":"repository/index.html","permalink":"https://conjurermaple.github.io/repository/index.html","excerpt":"","text":""},{"title":"分类","date":"2019-02-23T12:10:06.024Z","updated":"2019-02-21T11:24:38.164Z","comments":false,"path":"categories/index.html","permalink":"https://conjurermaple.github.io/categories/index.html","excerpt":"","text":""}],"posts":[{"title":"Ajax结合json案例学习","slug":"Ajax结合json案例学习","date":"2019-02-23T12:07:14.000Z","updated":"2019-02-23T12:38:22.656Z","comments":true,"path":"2019/02/23/Ajax结合json案例学习/","link":"","permalink":"https://conjurermaple.github.io/2019/02/23/Ajax结合json案例学习/","excerpt":"","text":"Ajax介绍百度百科已经很详细的解释了该技术Ajax 即“Asynchronous Javascript And XML”（异步 JavaScript 和 XML），是指一种创建交互式网页应用的网页开发技术。Ajax 是一种用于创建快速动态网页的技术。Ajax 是一种在无需重新加载整个网页的情况下，能够更新部分网页的技术。通过在后台与服务器进行少量数据交换，Ajax 可以使网页实现异步更新。这意味着可以在不重新加载整个网页的情况下，对网页的某部分进行更新。 为什么需要Ajax传统的交互方式：是发送请求到后端处理后，再刷新整个页面缺点：如果数据量大，加载会很慢，用户体验性不好 Ajax交互：只会刷新当前页面，也就是局部刷新 Ajax应用场景Ajax的应用场景很多，现在几乎每个web应用都使用了Ajax比如： 1、百度搜索的自动提示 2、无刷新分页 3、用户名的重复检查 4、购物车 5、用户登录（通过Ajax提交请求） 。。。。。。。 同步和异步概念解释同步：一个操作必须等到其他操作执行完后才能执行 例子： 你去上厕所，但只有一个坑，而且还有人，这时你只能等他上完出来，你才能进去上厕所 异步：一个操作不必等到其他操作执行完后才执行，可以一起执行 例子： 你去上厕所，我不需要等他出来，我换一个坑上 Ajax核心对象XMLHttpRequest1、创建XMLHttpRequest对象 //这是IE7+、Firefox、Chrome、Safari 以及 Opera的创建方式 var ajaxObj = new XMLHttpRequest(); //老版本的 Internet Explorer （IE5、IE6） var ajaxObj = new ActiveXObject(&quot;Microsoft.XMLHTTP&quot;); 2、将创建XMLHttpRequest对象封装成一个方法 方式一： 12345678910function createAjax() &#123; var ajaxObj; if (window.XMLHttpRequest) &#123; ajaxObj = new XMLHttpRequest(); &#125; else &#123; ajaxObj = new ActiveXObject(\"Microsoft.XMLHTTP\"); &#125; return ajaxObj;&#125; 方式二： 123456789function createAjax() &#123; var ajaxObj; try&#123; ajaxObj = new XMLHttpRequest(); &#125;catch(e) &#123; ajaxObj = new ActiveXObject(\"Microsoft.XMLHTTP\"); &#125; return ajaxObj;&#125; 使用Ajax检查用户名html里代码1234 &lt;!-- 这次不使用form表单提交,使用Ajax --&gt;用户名：&lt;input type=\"text\" id=\"username\" name=\"username\"&gt;密码：&lt;input type=\"password\" id=\"password\" name=\"password\"&gt;&lt;input type=\"button\" onclick=\"checkUsername()\" value=\"提交\"&gt; js代码 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748 function checkUsername() &#123; //获取username的值 var username = document.getElementById(\"username\").value; var ajaxObj = createAjax(); //创建对象 //第一个参数是请求方式，第二个参数是请求的路径，也就是提交到哪个路径 /* open(method,url,async) method：请求的类型；GET 或 POST url：文件在服务器上的位置 async：true（异步），一定要选择true或 false（同步） */ ajaxObj.open(\"get\",\"/check?username=\"+username,true); //打开连接 ,使用get方式，记住这里暂时不使用post，后面讲，传参与get方式有区别 //监听状态 /* 监听代码为什么要写在send前面？ 代码从上往下执行，有可能已经请求成功了，但是还没有执行监听的代码，从而监听不到 比如： ajaxObj.send(); alert(1)； 执行监听代码 */ //onreadystatechange:每当 readyState 属性改变时，就会调用该函数。 /* readyState:请求状态 0: 请求未初始化 未创建 1: 服务器连接已建立 open()方法 2: 请求已接收 send()方法 3: 请求处理中 服务器处理中 4: 请求已完成，且响应已就绪 响应完毕 status:Http响应状态 200: \"OK\" 请求成功 404: \"NOT FOUND\" 没有找到对应资源 500:\"Server Error\" 服务器端错误 responseText 获得字符串形式的响应数据。 responseXML 获得 XML 形式的响应数据 */ ajaxObj.onreadystatechange=function() &#123; if (ajaxObj.readyState==4 &amp;&amp; ajaxObj.status==200) &#123; //说明请求成功并且响应成功 console.log(ajaxObj.responseText);//打印返回的文本内容 &#125; &#125; //发送 ajaxObj.send();&#125; Ajax+json模拟登录 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485868788899091 &lt;script type=\"text/javascript\"&gt; /* json是一种数据交换的格式 由于XML太复杂，抒写严格 比如一个Student对象 XML表示： &lt;student&gt; &lt;name&gt;张三&lt;/name&gt; &lt;age&gt;18&lt;/age&gt; &lt;/student&gt; json表示： &#123;\"name\":\"张三\",\"age\":18&#125; */ /* json语法： &#123;key:value,key:value,key:value.....&#125; key可以使用单引号，也可以使用双引号，但建议使用双引号 后面讲json字符串转为json对象的时候讲 有多个？ //这里只列了2个，有多个直接在后面加 [&#123;key:value,key:value,key:value....&#125;,&#123;key:value,key:value,key:value...&#125;] 注意：如果value是字符串，一定要加引号 */ /* 将json格式字符串转为json对象 方式一：eval var jsonStr = '&#123;\"name\":\"张三\",\"age\":18&#125;'; var jsonObj = eval(\"(\"+jsonStr+\")\"); console.log(jsonObj); 我们再看看key使用单引号 发现也可以 var jsonStr = \"&#123;'name':'张三','age':18&#125;\"; var jsonObj = eval(\"(\"+jsonStr+\")\"); console.log(jsonObj); 方式二：JSON.parse(jsonStr); var jsonStr = '&#123;\"name\":\"张三\",\"age\":18&#125;'; var jsonObj = JSON.parse(jsonStr); console.log(jsonObj); 这种方式我们再看看key使用单引号 发现报错 这就是建议全部使用双引号的原因 var jsonStr = \"&#123;'name':'张三','age':18&#125;\"; var jsonObj = JSON.parse(jsonStr); console.log(jsonObj); */ //使用Ajax 的post方式请求以json格式返回---模拟登录function createAjax() &#123; var ajaxObj; if (window.XMLHttpRequest) &#123; //如果有这个对象 ajaxObj = new XMLHttpRequest(); &#125; else &#123; ajaxObj = new ActiveXObject(\"Microsoft.XMLHTTP\"); &#125; return ajaxObj;&#125; function login() &#123; //获取用户名以及密码 var username = document.getElementById(\"username\").value; var password = document.getElementById(\"password\").value; var ajaxObj = createAjax(); //post方式注意不是在这里传参了 ajaxObj.open(\"post\",\"/login\",true); ajaxObj.onreadystatechange=function() &#123; if (ajaxObj.readyState==4 &amp;&amp; ajaxObj.status==200) &#123; //说明请求成功并且响应成功 var jsonStr = ajaxObj.responseText;//返回的json格式字符串 //将字符串转为对象 var jsonObj = eval(\"(\"+jsonStr+\")\"); //取内容 console.log(jsonObj.success); &#125; &#125; //注意：post方式要加一句代码，使用form表单提交时，浏览器默认会加 ajaxObj.setRequestHeader(\"Content-type\",\"application/x-www-form-urlencoded\"); //发送 传参 var params = \"username=\"+username+\"&amp;password=\"+password; ajaxObj.send(params);&#125;&lt;/script&gt;&lt;/head&gt;&lt;body&gt; 用户名：&lt;input type=\"text\" id=\"username\" name=\"username\"&gt; 密码：&lt;input type=\"password\" id=\"password\" name=\"password\"&gt; &lt;input type=\"button\" onclick=\"login()\" value=\"登录\"&gt;&lt;/body&gt;","categories":[{"name":"前端","slug":"前端","permalink":"https://conjurermaple.github.io/categories/前端/"}],"tags":[{"name":"前端","slug":"前端","permalink":"https://conjurermaple.github.io/tags/前端/"}]},{"title":"JDK原生API解析XML","slug":"JDK原生API解析XML","date":"2019-02-22T05:50:31.000Z","updated":"2019-02-22T05:53:54.248Z","comments":true,"path":"2019/02/22/JDK原生API解析XML/","link":"","permalink":"https://conjurermaple.github.io/2019/02/22/JDK原生API解析XML/","excerpt":"","text":"1234567891011121314151617181920212223242526272829303132/** * @throws Exception * 修改某个节点的元素内容 * 将第一个联系人的address的值改为重庆 */ @Test public void test2() throws Exception &#123; //获取DocumentBuilderFactory DocumentBuilderFactory builderFactory = DocumentBuilderFactory.newInstance(); //获取解析器 DocumentBuilder builder = builderFactory.newDocumentBuilder(); //将内存中的XML解析为Document对象 Document dom = builder.parse(file); //拿到根节点 Element root = dom.getDocumentElement(); //拿到第一个联系人 Element linkman = (Element) root.getElementsByTagName(\"linkman\").item(0); //拿到第一个address Node address = linkman.getElementsByTagName(\"address\").item(0); //此时只是将内存中的数据更改了，没有做同步 address.setTextContent(\"重庆\"); //同步 TransformerFactory transformerFactory = TransformerFactory.newInstance(); //拿到转换器 Transformer transformer = transformerFactory.newTransformer(); //拿到内存里面的数据 Source domSource = new DOMSource(dom); //拿到磁盘上的文件 Result result = new StreamResult(file); transformer.transform(domSource, result); &#125; 1234567891011121314151617181920212223242526272829303132333435363738/** * @throws Exception * 增加一个联系人 */ @Test public void test3() throws Exception &#123; Document dom = DocumentBuilderFactory.newInstance().newDocumentBuilder().parse(file); //获取根节点 Element root = dom.getDocumentElement(); //创建linkman节点 Element linkman = dom.createElement(\"linkman\"); linkman.setAttribute(\"id\", \"3\"); root.appendChild(linkman); //创建name Element name = dom.createElement(\"name\"); name.setTextContent(\"小米\"); linkman.appendChild(name); //创建email Element email = dom.createElement(\"email\"); email.setTextContent(\"192033344@qq.com\"); linkman.appendChild(email); //创建address Element address = dom.createElement(\"address\"); address.setTextContent(\"成都高新区\"); linkman.appendChild(address); //创建group Element group = dom.createElement(\"group\"); group.setTextContent(\"小米科技有限公司\"); linkman.appendChild(group); //同步 TransformerFactory transformerFactory = TransformerFactory.newInstance(); Transformer transformer = transformerFactory.newTransformer(); Source source = new DOMSource(dom); Result result = new StreamResult(file); transformer.transform(source, result); &#125; 12345678910111213//删除第三个联系人 @Test public void test4() throws Exception &#123; Document document = DocumentBuilderFactory.newInstance().newDocumentBuilder().parse(file); Element root = document.getDocumentElement(); Node linkman = root.getElementsByTagName(\"linkman\").item(2); linkman.getParentNode().removeChild(linkman); Transformer transformer = TransformerFactory.newInstance().newTransformer(); Source source = new DOMSource(document); Result result = new StreamResult(file); transformer.transform(source, result); &#125;","categories":[{"name":"JAVA","slug":"JAVA","permalink":"https://conjurermaple.github.io/categories/JAVA/"}],"tags":[{"name":"JAVA","slug":"JAVA","permalink":"https://conjurermaple.github.io/tags/JAVA/"}]},{"title":"Dom4j解析XML","slug":"Dom4j解析XML","date":"2019-02-22T05:14:50.000Z","updated":"2019-02-22T05:55:59.528Z","comments":true,"path":"2019/02/22/Dom4j解析XML/","link":"","permalink":"https://conjurermaple.github.io/2019/02/22/Dom4j解析XML/","excerpt":"","text":"加入dom4j包 12345678910/** * @throws Exception * 获取Document */ @Test public void test1() throws Exception &#123; SAXReader reader = new SAXReader(); Document document = reader.read(file); System.out.println(document); &#125; 123456789101112131415161718192021/** * @throws Exception * 取出第二个联系人的名字 */ @Test public void test2() throws Exception &#123; SAXReader reader = new SAXReader(); Document document = reader.read(file); //获取根节点 Element rootElement = document.getRootElement(); //拿到所有的linkman List&lt;Element&gt; linkmanList = rootElement.elements(\"linkman\"); //拿到第二个联系人 Element linkman = linkmanList.get(1); /* Element name = linkman.element(\"name\"); String text = name.getText();*/ //拿到name的值 System.out.println(linkman.elementText(\"name\")); &#125; 1234567891011121314151617181920212223242526272829/** * @throws Exception * 修改第一个联系人的地址 */ @Test public void test3() throws Exception &#123; SAXReader reader = new SAXReader(); Document document = reader.read(file); Element rootElement = document.getRootElement(); List&lt;Element&gt; linkmanList = rootElement.elements(\"linkman\"); Element linkman = linkmanList.get(0); Element address = linkman.element(\"address\"); address.setText(\"南充\"); /** * // lets write to a file XMLWriter writer = new XMLWriter( new FileWriter( \"output.xml\" ) ); writer.write( document ); writer.close(); * */ //同步 FileWriter fileWriter = new FileWriter(file); XMLWriter writer = new XMLWriter(fileWriter); writer.write(document); writer.close(); &#125; 123456789101112131415161718192021222324252627/** * @throws Exception * 增加一个联系人 */ @Test public void test4() throws Exception &#123; SAXReader saxReader = new SAXReader(); Document document = saxReader.read(file); Element rootElement = document.getRootElement(); Element linkman = rootElement.addElement(\"linkman\"); Element name = linkman.addElement(\"name\"); name.setText(\"小米\"); Element email = linkman.addElement(\"email\"); email.setText(\"1920347@qq.com\"); Element address = linkman.addElement(\"address\"); address.setText(\"高新区\"); Element group = linkman.addElement(\"group\"); group.setText(\"小米科技有限公司\"); new OutputFormat(); //同步 OutputFormat format = OutputFormat.createPrettyPrint(); FileWriter fileWriter = new FileWriter(file); XMLWriter xmlWriter = new XMLWriter(fileWriter,format); xmlWriter.write(document); xmlWriter.close(); &#125; 12345678910111213141516171819/** * @throws Exception * 删除第三个联系人 */ @Test public void test5() throws Exception &#123; SAXReader saxReader = new SAXReader(); Document document = saxReader.read(file); Element rootElement = document.getRootElement(); List&lt;Element&gt; linkmanList = rootElement.elements(\"linkman\"); Element linkman = linkmanList.get(2); linkman.getParent().remove(linkman); //同步 FileWriter fileWriter = new FileWriter(file); XMLWriter xmlWriter = new XMLWriter(fileWriter); xmlWriter.write(document); xmlWriter.close(); &#125;","categories":[{"name":"JAVA","slug":"JAVA","permalink":"https://conjurermaple.github.io/categories/JAVA/"}],"tags":[{"name":"JAVA","slug":"JAVA","permalink":"https://conjurermaple.github.io/tags/JAVA/"}]}]}