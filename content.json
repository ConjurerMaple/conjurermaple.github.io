{"meta":{"title":"maple博客","subtitle":null,"description":null,"author":"maple","url":"https://conjurermaple.github.io"},"pages":[{"title":"404 Not Found：该页无法显示","date":"2019-02-22T06:55:02.968Z","updated":"2019-02-21T11:24:38.160Z","comments":false,"path":"/404.html","permalink":"https://conjurermaple.github.io//404.html","excerpt":"","text":""},{"title":"关于","date":"2019-02-22T06:50:12.087Z","updated":"2019-02-21T11:24:38.162Z","comments":false,"path":"about/index.html","permalink":"https://conjurermaple.github.io/about/index.html","excerpt":"","text":"个人详细介绍"},{"title":"书单","date":"2019-02-22T07:12:07.916Z","updated":"2019-02-21T11:24:38.163Z","comments":false,"path":"books/index.html","permalink":"https://conjurermaple.github.io/books/index.html","excerpt":"","text":""},{"title":"分类","date":"2019-02-21T11:24:38.164Z","updated":"2019-02-21T11:24:38.164Z","comments":false,"path":"categories/index.html","permalink":"https://conjurermaple.github.io/categories/index.html","excerpt":"","text":""},{"title":"Repositories","date":"2019-02-21T11:24:38.166Z","updated":"2019-02-21T11:24:38.166Z","comments":false,"path":"repository/index.html","permalink":"https://conjurermaple.github.io/repository/index.html","excerpt":"","text":""},{"title":"标签","date":"2019-02-21T11:24:38.167Z","updated":"2019-02-21T11:24:38.167Z","comments":false,"path":"tags/index.html","permalink":"https://conjurermaple.github.io/tags/index.html","excerpt":"","text":""},{"title":"友情链接","date":"2019-02-21T11:24:38.165Z","updated":"2019-02-21T11:24:38.165Z","comments":true,"path":"links/index.html","permalink":"https://conjurermaple.github.io/links/index.html","excerpt":"","text":""}],"posts":[{"title":"JDK原生API解析XML","slug":"JDK原生API解析XML","date":"2019-02-22T05:50:31.000Z","updated":"2019-02-22T05:53:54.248Z","comments":true,"path":"2019/02/22/JDK原生API解析XML/","link":"","permalink":"https://conjurermaple.github.io/2019/02/22/JDK原生API解析XML/","excerpt":"","text":"1234567891011121314151617181920212223242526272829303132/** * @throws Exception * 修改某个节点的元素内容 * 将第一个联系人的address的值改为重庆 */ @Test public void test2() throws Exception &#123; //获取DocumentBuilderFactory DocumentBuilderFactory builderFactory = DocumentBuilderFactory.newInstance(); //获取解析器 DocumentBuilder builder = builderFactory.newDocumentBuilder(); //将内存中的XML解析为Document对象 Document dom = builder.parse(file); //拿到根节点 Element root = dom.getDocumentElement(); //拿到第一个联系人 Element linkman = (Element) root.getElementsByTagName(\"linkman\").item(0); //拿到第一个address Node address = linkman.getElementsByTagName(\"address\").item(0); //此时只是将内存中的数据更改了，没有做同步 address.setTextContent(\"重庆\"); //同步 TransformerFactory transformerFactory = TransformerFactory.newInstance(); //拿到转换器 Transformer transformer = transformerFactory.newTransformer(); //拿到内存里面的数据 Source domSource = new DOMSource(dom); //拿到磁盘上的文件 Result result = new StreamResult(file); transformer.transform(domSource, result); &#125; 1234567891011121314151617181920212223242526272829303132333435363738/** * @throws Exception * 增加一个联系人 */ @Test public void test3() throws Exception &#123; Document dom = DocumentBuilderFactory.newInstance().newDocumentBuilder().parse(file); //获取根节点 Element root = dom.getDocumentElement(); //创建linkman节点 Element linkman = dom.createElement(\"linkman\"); linkman.setAttribute(\"id\", \"3\"); root.appendChild(linkman); //创建name Element name = dom.createElement(\"name\"); name.setTextContent(\"小米\"); linkman.appendChild(name); //创建email Element email = dom.createElement(\"email\"); email.setTextContent(\"192033344@qq.com\"); linkman.appendChild(email); //创建address Element address = dom.createElement(\"address\"); address.setTextContent(\"成都高新区\"); linkman.appendChild(address); //创建group Element group = dom.createElement(\"group\"); group.setTextContent(\"小米科技有限公司\"); linkman.appendChild(group); //同步 TransformerFactory transformerFactory = TransformerFactory.newInstance(); Transformer transformer = transformerFactory.newTransformer(); Source source = new DOMSource(dom); Result result = new StreamResult(file); transformer.transform(source, result); &#125; 12345678910111213//删除第三个联系人 @Test public void test4() throws Exception &#123; Document document = DocumentBuilderFactory.newInstance().newDocumentBuilder().parse(file); Element root = document.getDocumentElement(); Node linkman = root.getElementsByTagName(\"linkman\").item(2); linkman.getParentNode().removeChild(linkman); Transformer transformer = TransformerFactory.newInstance().newTransformer(); Source source = new DOMSource(document); Result result = new StreamResult(file); transformer.transform(source, result); &#125;","categories":[{"name":"JAVA","slug":"JAVA","permalink":"https://conjurermaple.github.io/categories/JAVA/"}],"tags":[{"name":"JAVA","slug":"JAVA","permalink":"https://conjurermaple.github.io/tags/JAVA/"}]},{"title":"Dom4j解析XML","slug":"Dom4j解析XML","date":"2019-02-22T05:14:50.000Z","updated":"2019-02-22T05:55:59.528Z","comments":true,"path":"2019/02/22/Dom4j解析XML/","link":"","permalink":"https://conjurermaple.github.io/2019/02/22/Dom4j解析XML/","excerpt":"","text":"加入dom4j包 12345678910/** * @throws Exception * 获取Document */ @Test public void test1() throws Exception &#123; SAXReader reader = new SAXReader(); Document document = reader.read(file); System.out.println(document); &#125; 123456789101112131415161718192021/** * @throws Exception * 取出第二个联系人的名字 */ @Test public void test2() throws Exception &#123; SAXReader reader = new SAXReader(); Document document = reader.read(file); //获取根节点 Element rootElement = document.getRootElement(); //拿到所有的linkman List&lt;Element&gt; linkmanList = rootElement.elements(\"linkman\"); //拿到第二个联系人 Element linkman = linkmanList.get(1); /* Element name = linkman.element(\"name\"); String text = name.getText();*/ //拿到name的值 System.out.println(linkman.elementText(\"name\")); &#125; 1234567891011121314151617181920212223242526272829/** * @throws Exception * 修改第一个联系人的地址 */ @Test public void test3() throws Exception &#123; SAXReader reader = new SAXReader(); Document document = reader.read(file); Element rootElement = document.getRootElement(); List&lt;Element&gt; linkmanList = rootElement.elements(\"linkman\"); Element linkman = linkmanList.get(0); Element address = linkman.element(\"address\"); address.setText(\"南充\"); /** * // lets write to a file XMLWriter writer = new XMLWriter( new FileWriter( \"output.xml\" ) ); writer.write( document ); writer.close(); * */ //同步 FileWriter fileWriter = new FileWriter(file); XMLWriter writer = new XMLWriter(fileWriter); writer.write(document); writer.close(); &#125; 123456789101112131415161718192021222324252627/** * @throws Exception * 增加一个联系人 */ @Test public void test4() throws Exception &#123; SAXReader saxReader = new SAXReader(); Document document = saxReader.read(file); Element rootElement = document.getRootElement(); Element linkman = rootElement.addElement(\"linkman\"); Element name = linkman.addElement(\"name\"); name.setText(\"小米\"); Element email = linkman.addElement(\"email\"); email.setText(\"1920347@qq.com\"); Element address = linkman.addElement(\"address\"); address.setText(\"高新区\"); Element group = linkman.addElement(\"group\"); group.setText(\"小米科技有限公司\"); new OutputFormat(); //同步 OutputFormat format = OutputFormat.createPrettyPrint(); FileWriter fileWriter = new FileWriter(file); XMLWriter xmlWriter = new XMLWriter(fileWriter,format); xmlWriter.write(document); xmlWriter.close(); &#125; 12345678910111213141516171819/** * @throws Exception * 删除第三个联系人 */ @Test public void test5() throws Exception &#123; SAXReader saxReader = new SAXReader(); Document document = saxReader.read(file); Element rootElement = document.getRootElement(); List&lt;Element&gt; linkmanList = rootElement.elements(\"linkman\"); Element linkman = linkmanList.get(2); linkman.getParent().remove(linkman); //同步 FileWriter fileWriter = new FileWriter(file); XMLWriter xmlWriter = new XMLWriter(fileWriter); xmlWriter.write(document); xmlWriter.close(); &#125;","categories":[{"name":"JAVA","slug":"JAVA","permalink":"https://conjurermaple.github.io/categories/JAVA/"}],"tags":[{"name":"JAVA","slug":"JAVA","permalink":"https://conjurermaple.github.io/tags/JAVA/"}]}]}